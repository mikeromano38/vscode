{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/vscode-api.service\";\nfunction ChatComponent_app_message_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-message\", 6);\n  }\n  if (rf & 2) {\n    const message_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"message\", message_r2);\n  }\n}\nfunction ChatComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.statusMessage, \" \");\n  }\n}\nexport let ChatComponent = /*#__PURE__*/(() => {\n  class ChatComponent {\n    constructor(vscodeApiService) {\n      this.vscodeApiService = vscodeApiService;\n      this.messages = [];\n      this.isProcessing = false;\n      this.statusMessage = '';\n      this.destroy$ = new Subject();\n    }\n    ngOnInit() {\n      console.log('Chat component initialized');\n      this.setupMessageListener();\n      this.addWelcomeMessage();\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n    setupMessageListener() {\n      window.addEventListener('message', event => {\n        const message = event.data;\n        switch (message.command) {\n          case 'startStreaming':\n            this.startStreaming();\n            break;\n          case 'addStreamingResponse':\n            this.addStreamingResponse(message.response);\n            break;\n          case 'finishStreaming':\n            this.finishStreaming();\n            break;\n          case 'addError':\n            this.addError(message.text);\n            break;\n          case 'updateStatus':\n            this.updateStatus(message.text);\n            break;\n          case 'setProcessing':\n            this.setProcessing(message.processing);\n            break;\n        }\n      });\n    }\n    addWelcomeMessage() {\n      const welcomeMessage = {\n        id: this.generateId(),\n        text: `📊 Welcome to DataVibe! Your AI-powered data analysis companion.\n\n**Features:**\n• Chat with your BigQuery data using natural language\n• Python code generation and analysis\n• Real-time streaming responses\n• Integration with VS Code's Google Cloud authentication\n\nStart by configuring your Google Cloud project, then ask questions about your data!`,\n        type: 'assistant',\n        timestamp: new Date(),\n        isStreaming: false\n      };\n      this.messages.push(welcomeMessage);\n    }\n    onSendMessage(text) {\n      if (!text.trim() || this.isProcessing) return;\n      console.log('Sending message:', text.trim());\n      // Add user message\n      const userMessage = {\n        id: this.generateId(),\n        text: text.trim(),\n        type: 'user',\n        timestamp: new Date(),\n        isStreaming: false\n      };\n      this.messages.push(userMessage);\n      // Send to extension\n      if (!this.vscodeApiService.isAvailable()) {\n        console.error('VS Code API not available');\n        this.addError('❌ **Error**: VS Code API not available. Please reload the extension.');\n        return;\n      }\n      this.vscodeApiService.postMessage({\n        command: 'sendMessage',\n        text: text.trim()\n      });\n      console.log('Message sent to extension');\n    }\n    startStreaming() {\n      console.log('=== Starting streaming ===');\n      // We don't need to create a streaming message anymore since each response\n      // will be its own message. The streaming indicator will be shown by the\n      // last message if it's still processing.\n      console.log('Streaming started - responses will be added as individual messages');\n    }\n    addStreamingResponse(response) {\n      console.log('=== Adding streaming response ===');\n      console.log('Response type:', response.type);\n      console.log('Response data:', response.data);\n      console.log('Current messages count:', this.messages.length);\n      // Create a new message for each response chunk\n      const newMessage = {\n        id: this.generateId(),\n        text: '',\n        type: 'assistant',\n        timestamp: new Date(),\n        isStreaming: false,\n        responses: [response] // Single response per message\n      };\n      this.messages.push(newMessage);\n      console.log('Added new message with response type:', response.type);\n      this.scrollToBottom();\n    }\n    finishStreaming() {\n      console.log('=== Finishing streaming ===');\n      console.log('Total messages after streaming:', this.messages.length);\n      // No need to update any message since each response is its own message\n      this.scrollToBottom();\n    }\n    addError(text) {\n      const lastMessage = this.messages[this.messages.length - 1];\n      if (lastMessage && lastMessage.isStreaming) {\n        lastMessage.text = text;\n        lastMessage.type = 'error';\n        lastMessage.isStreaming = false;\n      } else {\n        const errorMessage = {\n          id: this.generateId(),\n          text: text,\n          type: 'error',\n          timestamp: new Date(),\n          isStreaming: false\n        };\n        this.messages.push(errorMessage);\n      }\n      this.scrollToBottom();\n    }\n    updateStatus(text) {\n      this.statusMessage = text;\n    }\n    setProcessing(processing) {\n      this.isProcessing = processing;\n    }\n    scrollToBottom() {\n      setTimeout(() => {\n        const messagesContainer = document.querySelector('.messages');\n        if (messagesContainer) {\n          messagesContainer.scrollTop = messagesContainer.scrollHeight;\n        }\n      }, 100);\n    }\n    generateId() {\n      return Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n    static {\n      this.ɵfac = function ChatComponent_Factory(t) {\n        return new (t || ChatComponent)(i0.ɵɵdirectiveInject(i1.VscodeApiService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: ChatComponent,\n        selectors: [[\"app-chat\"]],\n        decls: 6,\n        vars: 3,\n        consts: [[\"messagesContainer\", \"\"], [1, \"chat-container\"], [1, \"messages\"], [3, \"message\", 4, \"ngFor\", \"ngForOf\"], [3, \"sendMessageEvent\", \"isProcessing\"], [\"class\", \"status\", 4, \"ngIf\"], [3, \"message\"], [1, \"status\"]],\n        template: function ChatComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            const _r1 = i0.ɵɵgetCurrentView();\n            i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2, 0);\n            i0.ɵɵtemplate(3, ChatComponent_app_message_3_Template, 1, 1, \"app-message\", 3);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"app-input\", 4);\n            i0.ɵɵlistener(\"sendMessageEvent\", function ChatComponent_Template_app_input_sendMessageEvent_4_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.onSendMessage($event));\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(5, ChatComponent_div_5_Template, 2, 1, \"div\", 5);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngForOf\", ctx.messages);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"isProcessing\", ctx.isProcessing);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.statusMessage);\n          }\n        },\n        styles: [\".chat-container[_ngcontent-%COMP%]{flex:1;display:flex;flex-direction:column;gap:15px;overflow:hidden;padding:15px;min-height:0}.messages[_ngcontent-%COMP%]{flex:1;overflow-y:auto;padding:8px;background-color:var(--vscode-input-background);border:1px solid var(--vscode-input-border);border-radius:4px;min-height:200px;max-height:60vh}.status[_ngcontent-%COMP%]{font-size:11px;color:var(--vscode-descriptionForeground);text-align:center;padding:8px;border-top:1px solid var(--vscode-panel-border)}@media (max-width: 400px){.chat-container[_ngcontent-%COMP%]{padding:10px;gap:10px}.messages[_ngcontent-%COMP%]{padding:6px;min-height:150px;max-height:50vh}.status[_ngcontent-%COMP%]{font-size:10px;padding:6px}}\"]\n      });\n    }\n  }\n  return ChatComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
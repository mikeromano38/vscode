{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nconst _c0 = [\"messageInput\"];\nexport let InputComponent = /*#__PURE__*/(() => {\n  class InputComponent {\n    constructor() {\n      this.isProcessing = false;\n      this.sendMessageEvent = new EventEmitter();\n      this.messageText = '';\n      this.placeholder = 'Ask a question about your data...';\n    }\n    onKeyDown(event) {\n      if (event.key === 'Enter' && !event.shiftKey) {\n        event.preventDefault();\n        this.sendMessage();\n      }\n    }\n    sendMessage() {\n      const text = this.messageText.trim();\n      if (text && !this.isProcessing) {\n        this.sendMessageEvent.emit(text);\n        this.messageText = '';\n        this.focusInput();\n      }\n    }\n    focusInput() {\n      setTimeout(() => {\n        if (this.messageInput) {\n          this.messageInput.nativeElement.focus();\n        }\n      }, 100);\n    }\n    static {\n      this.ɵfac = function InputComponent_Factory(t) {\n        return new (t || InputComponent)();\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: InputComponent,\n        selectors: [[\"app-input\"]],\n        viewQuery: function InputComponent_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.messageInput = _t.first);\n          }\n        },\n        inputs: {\n          isProcessing: \"isProcessing\"\n        },\n        outputs: {\n          sendMessageEvent: \"sendMessageEvent\"\n        },\n        decls: 6,\n        vars: 5,\n        consts: [[\"messageInput\", \"\"], [1, \"input-container\"], [\"rows\", \"3\", 1, \"input-field\", 3, \"ngModelChange\", \"keydown\", \"placeholder\", \"disabled\", \"ngModel\"], [1, \"send-btn\", 3, \"click\", \"disabled\"]],\n        template: function InputComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            const _r1 = i0.ɵɵgetCurrentView();\n            i0.ɵɵelementStart(0, \"div\", 1)(1, \"textarea\", 2, 0);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function InputComponent_Template_textarea_ngModelChange_1_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              i0.ɵɵtwoWayBindingSet(ctx.messageText, $event) || (ctx.messageText = $event);\n              return i0.ɵɵresetView($event);\n            });\n            i0.ɵɵlistener(\"keydown\", function InputComponent_Template_textarea_keydown_1_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.onKeyDown($event));\n            });\n            i0.ɵɵtext(3, \"      \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"button\", 3);\n            i0.ɵɵlistener(\"click\", function InputComponent_Template_button_click_4_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.sendMessage());\n            });\n            i0.ɵɵtext(5);\n            i0.ɵɵelementEnd()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"placeholder\", ctx.placeholder)(\"disabled\", ctx.isProcessing);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.messageText);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"disabled\", ctx.isProcessing || !ctx.messageText.trim());\n            i0.ɵɵadvance();\n            i0.ɵɵtextInterpolate1(\" \", ctx.isProcessing ? \"Sending...\" : \"Send\", \" \");\n          }\n        },\n        dependencies: [i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgModel],\n        styles: [\".input-container[_ngcontent-%COMP%]{display:flex;gap:10px;align-items:flex-end}.input-field[_ngcontent-%COMP%]{flex:1;min-height:60px;max-height:200px;resize:vertical;padding:10px;border:1px solid var(--vscode-input-border);border-radius:4px;background-color:var(--vscode-input-background);color:var(--vscode-input-foreground);font-family:var(--vscode-font-family);font-size:var(--vscode-font-size);outline:none}.input-field[_ngcontent-%COMP%]:focus{outline:1px solid var(--vscode-focusBorder)}.input-field[_ngcontent-%COMP%]:disabled{opacity:.6;cursor:not-allowed}.send-btn[_ngcontent-%COMP%]{background-color:var(--vscode-button-background);color:var(--vscode-button-foreground);border:none;padding:10px 20px;border-radius:4px;cursor:pointer;font-size:14px;height:60px;transition:background-color .2s ease}.send-btn[_ngcontent-%COMP%]:hover:not(:disabled){background-color:var(--vscode-button-hoverBackground)}.send-btn[_ngcontent-%COMP%]:disabled{background-color:var(--vscode-button-secondaryBackground);color:var(--vscode-button-secondaryForeground);cursor:not-allowed}\"]\n      });\n    }\n  }\n  return InputComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}